package com.gymcrm.gymservice;

import com.gymcrm.dao.TraineeRepository;
import com.gymcrm.model.Trainee;
import com.gymcrm.service.impl.TraineeServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class TraineeServiceTest {

    @Mock
    private TraineeRepository traineeRepository;

    @InjectMocks
    private TraineeServiceImpl traineeService;

    @BeforeEach
    void setup() {
    }

    @Test
    void testCreateTrainee() {
        Trainee trainee = new Trainee();
        trainee.setFirstName("John");
        trainee.setLastName("Doe");

        Trainee created = traineeService.createTrainee(trainee);

        assertNotNull(created.getId(), "ID should be generated by the service");
        assertNotNull(created.getUsername(), "Username should be generated by the service");
        assertNotNull(created.getPassword(), "Password should be generated by the service");

        verify(traineeRepository, times(1)).create(any(Trainee.class));
    }

    @Test
    void testUpdateTrainee() {
        Trainee existing = new Trainee();
        existing.setId(10L);
        existing.setFirstName("Jane");

        traineeService.updateTrainee(existing);

        verify(traineeRepository, times(1)).update(existing);
    }

    @Test
    void testDeleteTrainee() {
        Long traineeId = 5L;

        traineeService.deleteTrainee(traineeId);

        verify(traineeRepository, times(1)).delete(traineeId);
    }

    @Test
    void testGetTrainee() {
        Long traineeId = 2L;
        Trainee mockTrainee = new Trainee();
        mockTrainee.setId(traineeId);
        mockTrainee.setFirstName("Mark");

        when(traineeRepository.read(traineeId)).thenReturn(mockTrainee);

        Trainee result = traineeService.getTrainee(traineeId);

        assertNotNull(result, "Should return the trainee from DAO");
        assertEquals("Mark", result.getFirstName());
        verify(traineeRepository, times(1)).read(traineeId);
    }

    @Test
    void testGetAllTrainees() {
        Trainee t1 = new Trainee();
        Trainee t2 = new Trainee();
        when(traineeRepository.findAll()).thenReturn(Arrays.asList(t1, t2));

        List<Trainee> all = traineeService.getAllTrainees();

        assertEquals(2, all.size());
        verify(traineeRepository, times(1)).findAll();
    }
}
